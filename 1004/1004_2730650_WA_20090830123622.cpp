#include<iostream>
const int MAXINT=20000;int n,m;int graph[101][101];int ans,ans_path_length;int ans_path[101];int now_path[101];bool used[101];int aimnow;void DFS(int nodenow,int length,int depth){    if(length>=ans) return;    if(nodenow==aimnow && length>0)    {        if(length<ans &&depth>3)        {            ans=length;            ans_path_length=depth-1;           memcpy(ans_path,now_path,sizeof(now_path));        }        return;    }    used[nodenow]=true;    now_path[depth]=nodenow;    for(int i=1;i<=n;++i)        if(graph[nodenow][i]!=MAXINT && i!=nodenow && !(i!=aimnow &&used[i]))            DFS(i,length+graph[nodenow][i],depth+1);    used[nodenow]=false;}int main(){    while(true)    {        std::cin>>n;if(n==-1)break;        std::cin>>m;        for(int i=1;i<=n;++i)        {            for(int j=1;j<=n;++j)               graph[i][j]=MAXINT; graph[i][i]=0;        }        for(int i=1;i<=m;++i)        {            int a,b,c;            std::cin>>a>>b>>c;            if(c<graph[a][b])            {               graph[a][b]=c;            }        }        memset(used,0,sizeof(used));        ans=MAXINT;        for(int i=1;i<=n;++i)        {            aimnow=i;            DFS(i,0,1);        }        if(ans==MAXINT)            std::cout<<"No solution."<<std::endl;        else        {            std::cout<<ans_path[1];            for(int i=2;i<=ans_path_length;++i)               std::cout<<' '<<ans_path[i];            std::cout<<std::endl;        }           }    return 0;}